%% ===readme===

% descrip: matlab scripts plot Nonlinear Ekman vertical velocity (W)
% based on Stern (1965) formulation  
% 2) Stern nonlinear Ekman vertical pumping velocity
% 1) linear Ekman vertical pumping velocity
% 3) CESM model output

% update history:
% v1.0 DL 2019Dec05
% v1.1 DL 2019Dec09
% v1.2 DL 2020Feb05

% extra notes:
% =============


%% === set up environments ===
clear all;close all;clc;

  date_str='2020Feb08'; 

header = 'This file was generated by DL via code pltsaveTauKesaiRoEkmanWvelGlobalBorealWinterAv_2020Feb08.m';
outfile1 = ['../data_after_manipulation/TauKesaiRoEkmanWvelGlobalBorealWinterAv_',date_str,'.mat'];

% pic1 = ['../pics/TauKesaiRoEkmanWvelContoursGlobalBorealWinterAv_',date_str,'.png'];

addpath(genpath('Func4EkmanProject/'))
% addpath(genpath('/home/dapengli@ad.geos.tamu.edu/MatlabCodes4DatAnalysis_DL'))

Constants4CESM

tau_amp_csum  = 0;
tau_curl_csum = 0;
kesai_csum    = 0;
Ro_csum       = 0;
w_nl_csum     = 0;
w_li_csum     = 0;
w_df_csum     = 0;
Ndays         = 0; 

%=============================


%% === data loading and analysis ===
for iyr = 87:90
  for imon = [01 02 03 10 11 12]; % winter 
      
%% === load data ===
infile  = ['../raw_data/CESM_GlobalRegrid87_90MonthlyDat/TAUXTAUYSSH/' ...
    'CESM_regrid_MonthlyOutput_TAUXTAUYSSH_',num2str(iyr),'-',num2str(imon,'%02d'),'.nc'];% ncdisp(infile)
disp(['loading ', infile])
taux = ncread(infile,'TAUX',start_3dvar,count_3dvar,stride_3dvar).*0.1; 
tauy = ncread(infile,'TAUY',start_3dvar,count_3dvar,stride_3dvar).*0.1; 
ssh  = ncread(infile,'SSH', start_3dvar,count_3dvar,stride_3dvar).*0.01;
time = ncread(infile,'time');
ntime = numel(time);

outfile = ['../data_after_manipulation/' ...
    'EkmanWvelGlobalCESM_',num2str(iyr),'-',num2str(imon,'%02d'),'.mat'];% ncdisp(infile)
% ==================


%% === data analysis ===
for iday = 1 : ntime % loop through time
  disp(['analyzing day ', num2str(iday,'%02d')])

% --- compute wind stress amplitude and curl ---
  % compute wind stress amplitude 
  tau_amp  = sqrt((taux(:,:,iday)').^2+(tauy(:,:,iday)').^2);   
  % compute wind stress curl
  tau_curl = CalcCurlz4UnevenGridsFunc(x_2d,y_2d, ...
     taux(:,:,iday)',tauy(:,:,iday)');
% ----------------------------------------------

% --- compute geostrophic velocity and geostrophic vorticity ---
  % compute geostrophic velocity
  [Ug,Vg] = CalcGeostrophyVel4UnevenGridsFunc( ...
       ssh(:,:,iday)',x_2d,y_2d,lat_1d); 
  % compute geostrophic vorticity
  kesai = CalcCurlz4UnevenGridsFunc(x_2d,y_2d, ...
           Ug,Vg);
       
  % compute Rossby num
  Ro = kesai./f_rp; 
% --------------------------------------------

% --- compute linear and nonlinear Ekman Wvel ---
% compute linear Ekman Wvel
  w_nl = CalcEkmanWvelFunc(rho_w,x_2d,y_2d, ...
     taux(:,:,iday)',tauy(:,:,iday)',f_rp,kesai,f_min);
% compute nonlinear Ekman Wvel 
  w_li = CalcEkmanWvelFunc(rho_w,x_2d,y_2d, ...
     taux(:,:,iday)',tauy(:,:,iday)',f_rp,0,f_min);
% df: difference between nonliner and linear Ekman Wvel
  w_df = w_nl - w_li; 
% 3d array for output files
  w_nl_3d(:,:,iday) = w_nl;
  w_li_3d(:,:,iday) = w_li;
% -------------------------

% --- compute cumulative sum (csum) --- 
  tau_amp_csum  = tau_amp_csum  + tau_amp;
  tau_curl_csum = tau_curl_csum + tau_curl;
  kesai_csum    = kesai_csum + kesai;
  Ro_csum       = Ro_csum + Ro;
  w_nl_csum     = w_nl_csum + w_nl;
  w_li_csum     = w_li_csum + w_li;
  w_df_csum     = w_df_csum + w_df;
% w_ce_wt = w_ce_raw(:,:,IndxSea{1});
% ---------------

% --- compute number of loops ---
Ndays = Ndays + 1;
% -------------------------------

% --- clear vars to save memory --- 
clear tau_amp tau_curl Ug Vg kesai Ro w_nl w_li w_df 
% ---------------------------------
end

save(outfile,'header','lon_1d','lat_1d','w_nl_3d','w_li_3d')

% --- clear vars to save memory --- 
  clear infile taux tauy ssh time ntime w_nl_3d w_li_3d
% ---------------------------------

  end
end

% --- compute mean value ---
tau_amp_TimeAv  = tau_amp_csum ./ Ndays;
tau_curl_TimeAv = tau_curl_csum ./ Ndays;
kesai_TimeAv    = kesai_csum ./ Ndays;
Ro_TimeAv       = Ro_csum ./ Ndays;
w_nl_TimeAv     = w_nl_csum ./ Ndays;
w_li_TimeAv     = w_li_csum ./ Ndays;
w_df_TimeAv     = w_df_csum ./ Ndays;
% --------------------------
% ==================


% %% === make pics ===
% f1=figure; % wind stress amp and curl
% 
%    set(f1,'units','normalized','position',[0,0,1,1]) 
%    
% subplot(3,2,1)
%   pcolor(lon_1d,lat_1d,tau_amp_TimeAv);shading interp;
% subplot(3,2,2)
%   pcolor(lon_1d,lat_1d,tau_curl_TimeAv);shading interp;
% subplot(3,2,3)
%   pcolor(lon_1d,lat_1d,kesai_TimeAv);shading interp;
% subplot(3,2,4)
%   pcolor(lon_1d,lat_1d,Ro_TimeAv);shading interp;
% subplot(3,2,5)
%   pcolor(lon_1d,lat_1d,w_nl_TimeAv);shading interp;
% subplot(3,2,6)
%   pcolor(lon_1d,lat_1d,w_li_TimeAv);shading interp;
% % =====================  
  
  
%% === output data ===
save(outfile1,'header','lon_1d','lat_1d','tau_amp_TimeAv','tau_curl_TimeAv', ...
  'kesai_TimeAv','Ro_TimeAv','w_nl_TimeAv','w_li_TimeAv','w_df_TimeAv','Ndays')

% print(f1,'-dpng',pic1) 
% print(f2,'-dpng','-r500',pic2) 
% ====================
